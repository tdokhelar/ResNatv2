<div class="input-field col s12">

  {# ICON #}
  <i class="material-icons {{ field.icon|default('gogo-icon-date') }} prefix"></i>

  {# INPUT #}
  {% set inputClass = field.required|default(false) ? "required" : ""%}
  <input type="hidden" name="data[{{ field.name }}]" value="{{ element.data[field.name]|default(null) }}" id="input-{{ field.name }}-start"/>
  {% if field.range is defined %}
    <input type="hidden" name="data[{{ field.name }}_end]" value="{{ element.data[field.name ~ '_end']|default(null) }}" id="input-{{ field.name }}-end"/>
  {% endif %}
  <input type="text" id="input-{{ field.name }}-display" readonly="true" class="{{ inputClass }}"/>

  {# LABEL #}
  <label for="input-{{ field.name }}" data-error="{{ fields.errorMsg|default('') }}" class="gogo-form-label label-{{ field.type }}">
    <span class="to-html">{{ field.label|raw }}</span>
    {% if field.required|default(false) %}<span class="mandatory-asterisk"></span>{% endif %}
  </label>

  <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" />
  
  {# TODO translation #}
  <script>
    document.addEventListener("DOMContentLoaded", function(event) {
      moment.locale('fr', {
        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
        monthsParseExact : true,
        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Aujourd’hui à] LT',
            nextDay : '[Demain à] LT',
            nextWeek : 'dddd [à] LT',
            lastDay : '[Hier à] LT',
            lastWeek : 'dddd [dernier à] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'dans %s',
            past : 'il y a %s',
            s : 'quelques secondes',
            m : 'une minute',
            mm : '%d minutes',
            h : 'une heure',
            hh : '%d heures',
            d : 'un jour',
            dd : '%d jours',
            M : 'un mois',
            MM : '%d mois',
            y : 'un an',
            yy : '%d ans'
        },
        dayOfMonthOrdinalParse : /\d{1,2}(er|e)/,
        ordinal : function (number) {
            return number + (number === 1 ? 'er' : 'e');
        },
        meridiemParse : /PD|MD/,
        isPM : function (input) {
            return input.charAt(0) === 'M';
        },
        // In case the meridiem units are not separated around 12, then implement
        // this function (look at locale/id.js for an example).
        // meridiemHour : function (hour, meridiem) {
        //     return /* 0-23 hour, given meridiem token and hour 1-12 */ ;
        // },
        meridiem : function (hours, minutes, isLower) {
            return hours < 12 ? 'PD' : 'MD';
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // Used to determine first week of the year.
        }
      });

      // See documentation for all options https://www.daterangepicker.com/
      var config = {
        autoUpdateInput: true,
        timePickerIncrement: 15,
        timePicker24Hour: true,
        showDropdowns: true,
        buttonClasses: "btn waves-effect waves-light",
        cancelButtonClasses: "btn-neutral",
        applyButtonClasses: "btn-primary",
        locale: {
          separator: " - ",
          applyLabel: "Ok",
          cancelLabel: "Annuler",
        }
      }

      config.timePicker = {% if field.timepicker is defined %}true{%else%}false{%endif%};
      config.singleDatePicker = {% if field.range is defined %}false{%else%}true{%endif%};

      var format = 'dddd D MMMM YYYY';
      if (config.timePicker) format += ' HH[h]mm'

      config.locale.format = format

      var initialStartDate = $("#input-{{ field.name }}-start").val()
      var initialEndDate = $("#input-{{ field.name }}-end").val()
      if (initialStartDate) config.startDate = moment(initialStartDate)
      if (initialEndDate) config.endDate = moment(initialEndDate)
      
      $("#input-{{ field.name }}-display")
        .daterangepicker(config)
        .on('apply.daterangepicker', function(ev, picker) {
          updateInputDisplay(picker);
        })

      $('.field-date i.prefix, .field-date label').on('click', function() {
        $(this).closest('.field-date').find('input[type="text"]').trigger('click')
      })

      function updateInputDisplay(picker) {
        $("#input-{{ field.name }}-start").val(picker.startDate.format())
        $("#input-{{ field.name }}-end").val(picker.endDate.format())
        var dateStart = picker.startDate.format("dddd D MMMM YYYY")
        var dateEnd   = picker.endDate.format("dddd D MMMM YYYY")
        var timeStart = picker.startDate.format("HH[h]mm")
        var timeEnd   = picker.endDate.format("HH[h]mm")
        var displayValue = "";
        if (dateStart == dateEnd) {
          displayValue = dateStart
          if (config.timePicker) displayValue += ' de ' + timeStart + ' à ' + timeEnd;
        } else {
          displayValue = 'Du ' + dateStart
          if (config.timePicker)  displayValue += ' ' + timeStart
          displayValue += ' au ' + dateEnd;
          if (config.timePicker)  displayValue += ' ' + timeEnd
        }
        $("#input-{{ field.name }}-display").val(displayValue).trigger('change');
      }

      // set initial values
      if (initialStartDate)
        updateInputDisplay($("#input-{{ field.name }}-display").data('daterangepicker'))
      else 
        $("#input-{{ field.name }}-display").val("").trigger('change')
    });
  </script>
</div>

